#SAMPLE Github Action YAML
#establish triggers for action
on: 
 push:
  branches: [development]
#establish jobs for the workflow of the action
jobs:
 #define the test job 
 test:
  #define the type of runner used for the job (target OS)
  runs-on: windows-latest
  #steps of the build job - defines what occurs when the job is triggered
  steps:
  - name: Step 1 - Check out branch from Github
    uses: actions/checkout@v2
  - name: Step 2 - Set up JDK
    uses: actions/setup-java@v1
    with:
     java-version: 16
     distribution: adopt
  - name: Step 3 - Test project(s) with Maven
    run: |
     echo TESTING PROJECT 1
     cd code/CodeCoverage_Sample
     mvn --batch-mode --update-snapshots clean verify
     cd ../..

		4) commit yaml
		
	2) locally - ensure CI-Checks available on both branches
		git checkout release
		git pull
		git checkout development
		git pull
		git merge release
		git push
		
	3) ensure checks run on push
		* check action tab in github to verify checks were executed
		* check development branch in code tab to ensure check is present from successful checks (may display orange dot if checks are not yet complete)

4) setup pull-request requirement
	1) github - setup branch protection rule
		go to Settings/Branches
		Next to "Branch protection rules", click Add rule.
		Under "Branch name pattern", type the branch name or pattern you want to protect (i.e., release). 
		select Require status checks to pass before merging
		search for name of the job defined in your action (e.g., test is the job in the sample from step 2.1.3 above)
		select the job to add it as a required status check (if you have not already triggered the check as done in step 2.2 above, then github may not display it as an option)
		select the CI action (i.e., test) as the status check required to pass
		
		*TAKE A SCREENSHOT OF THIS PAGE*

		select create
		NOTE: several other options were discussed in class, but this is the only one necessary to prevent pull-requests when the CI checks fail
	
	2) verify merge allowed on successful check
		1) locally - setup for checks
			git checkout development
			<modify a file by adding whitespace or some other change that will not cause checks to fail>
			git add *
			git commit -m "setting up for successful pull-request"
			git push
		
		2) github - generate pull request and verify checks are run
			on code tab, select development branch
			select option to generate pull request
			on pull-request tab, select the new pull request
			ensure checks run successfully, and you are allowed to merge the changes (may need to wait for checks to complete)
			
			*TAKE A SCREENSHOT OF THIS PAGE*
			
			merge changes and close pull request
	
	2) verify merge not allowed on failed check
		1) locally - setup for checks
			git checkout release
			git pull
			git checkout development
			git merge release
			<modify the TestCheckGuess class to remove or comment out all unit tests>
			git add *
			git commit -m "setting up for failed pull-request"
			git push
		
		2) github - generate pull request and verify checks are run
			on code tab, select development branch
			select option to generate pull request
			on pull-request tab, select the new pull request
			ensure checks fail, and you are not allowed to merge the changes (may need to wait for checks to complete)
			
			*TAKE A SCREENSHOT OF THIS PAGE*
